# -*- coding: utf-8 -*-
"""HeardU_batch.ipynb의 사본

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bfomi0zPb6uzUGgAXRAY9Q5dw_EYtsbm
"""

!pip install numpy==1.24.4


from google.colab import drive
drive.mount('/content/drive')

import os
import zipfile
import json
import random
from sklearn.model_selection import train_test_split

json_zip_path = "/content/drive/MyDrive/인지응팀플/content/json_files/zip/[라벨]1.AI챗봇.zip"
wav_zip_path = "/content/drive/MyDrive/인지응팀플/content/wav_files/zip/[원천]1.AI챗봇.zip"


json_extract_dir = "/content/json_unzip"
wav_extract_dir = "/content/wav_unzip"

def unzip(zip_path, extract_to):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)

unzip(json_zip_path, json_extract_dir)
unzip(wav_zip_path, wav_extract_dir)


file_list = []
i = 0

for root, dirs, files in os.walk(json_extract_dir):
    for filename in files:
        if not filename.endswith(".json"):
            continue

        base_name = filename[:-5]  # ".json" 제거
        json_path = os.path.join(root, filename)
        wav_path = json_path.replace(json_extract_dir, wav_extract_dir).replace(".json", ".wav")

        if not os.path.exists(wav_path):
            print(f"경고: {wav_path} 파일이 존재하지 않습니다.")
            continue

        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            label = data["발화정보"]["stt"]

        file_list.append((wav_path, label, ""))
        i += 1
        if i % 10 == 0:
            print(f"{i}개 파일 추가 완료")



if len(file_list) > 2000:
    # 전체에서 랜덤하게 2000개 골라서 덮어쓰기
    file_list = random.sample(file_list, 2000)
    print(f"2000개 추출.")

if len(file_list) < 3:
    raise ValueError("데이터셋이 너무 적습니다.")


train_data, temp_data = train_test_split(file_list, test_size=0.3, random_state=42)
valid_data, test_data = train_test_split(temp_data, test_size=0.5, random_state=42)


!pip install -q openai-whisper


!apt-get update -qq && apt-get install -qq -y ffmpeg

import os
import json
import torch
from torch.utils.data import DataLoader, Dataset
from sklearn.model_selection import train_test_split
from tqdm import tqdm
import whisper


class ContextDataset(Dataset):
    def __init__(self, file_list):
        """
        file_list: List of tuples (audio_path: str, label: str, context: str)
        여기서 context는 실제로 사용하지 않고, label만 사용한다고 가정합니다.
        """
        super().__init__()
        self.file_list = file_list

    def __len__(self):
        return len(self.file_list)

    def __getitem__(self, idx):
        audio_path, label, _context = self.file_list[idx]

        import torchaudio
        waveform, sr = torchaudio.load(audio_path)           
        waveform = waveform.squeeze(0)                      
        waveform = waveform.to(torch.float32)                  

        return waveform, label

##모델로드##
#model_path = "/content/drive/MyDrive/인지응팀플/0604_random.pt"
device = "cuda" if torch.cuda.is_available() else "cpu"

model = whisper.load_model("tiny", download_root=None)
model.to(device)

tokenizer = whisper.tokenizer.get_tokenizer(multilingual=model.is_multilingual)

# Loss 함수
loss_fn = torch.nn.CrossEntropyLoss(ignore_index=-100)

# Optimizer 
optimizer = torch.optim.AdamW(model.parameters(), lr=1e-5, betas=(0.9, 0.999), eps=1e-08)

def collate_fn(batch):

    waveforms = [item[0] for item in batch]  
    labels = [item[1] for item in batch]      
    B = len(waveforms)

    
    processed_audios = []
    for w in waveforms:
        
        w_pt = whisper.pad_or_trim(w.to(device))  
        processed_audios.append(w_pt)


    mel_list = []
    for w_pt in processed_audios:
        mel = whisper.log_mel_spectrogram(w_pt) 
        mel_list.append(mel)

    mels = torch.stack(mel_list, dim=0).to(device)  

    
    token_lists = []
    for lbl in labels:
        token_ids = tokenizer.encode(lbl)          
        token_ids = torch.tensor(token_ids, dtype=torch.long)
        token_lists.append(token_ids)

 
    max_len = max(t.shape[0] for t in token_lists)    

    L = max_len - 1
 
    input_tokens = torch.full((B, L), tokenizer.eot, dtype=torch.long, device=device)

    target_tokens = torch.full((B, L), -100, dtype=torch.long, device=device)

    for i, t in enumerate(token_lists):
      
        if t.shape[0] <= 1:
            continue  #입력이 너무 짧은 경우
        inp = t[:-1]      
        tgt = t[1:]       
        length = inp.shape[0]
        input_tokens[i, :length] = inp.to(device)
        target_tokens[i, :length] = tgt.to(device)

    return mels, input_tokens, target_tokens


# 5) DataLoader

batch_size = 8 # 32부턴 코랩이 멈춤..

train_loader = DataLoader(
    ContextDataset(train_data),
    batch_size=batch_size,
    shuffle=True,
    collate_fn=collate_fn,
    num_workers=1,     
    pin_memory=True
)
valid_loader = DataLoader(
    ContextDataset(valid_data),
    batch_size=batch_size,
    shuffle=False,
    collate_fn=collate_fn,
    num_workers=1,
    pin_memory=True
)


# 학습 루프 (batch 학습 코드)

num_epochs = 5
model.train()

dropout = torch.nn.Dropout(p=0.1).to(device)


for epoch in range(num_epochs):
    train_loss_epoch = 0.0
    loop = tqdm(train_loader, leave=True)
    for mels, input_tokens, target_tokens in loop:
     
        logits = model(mels, input_tokens) 
        logits = dropout(logits)

        B, L, V = logits.shape
        loss = loss_fn(
            logits.view(-1, V),           
            target_tokens.view(-1)         
        )

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        train_loss_epoch += loss.item()
        loop.set_description(f"Epoch {epoch+1}")
        loop.set_postfix(train_loss=loss.item())

    avg_train_loss = train_loss_epoch / len(train_loader)
    print(f"\n Epoch {epoch+1} | 평균 Train Loss: {avg_train_loss:.4f}")

   
    # 검증 루프

    model.eval()
    val_losses = []
    with torch.no_grad():
        for mels, input_tokens, target_tokens in valid_loader:
            logits = model(mels, input_tokens)
            B, L, V = logits.shape
            val_loss = loss_fn(
                logits.view(-1, V),
                target_tokens.view(-1)
            )
            val_losses.append(val_loss.item())

    val_loss_mean = sum(val_losses) / len(val_losses)
    print(f"Epoch {epoch+1} 검증데이터 | Validation Loss: {val_loss_mean:.4f}\n")
    model.train()

#모델 저장
save_path = "/content/drive/MyDrive/인지응팀플/epoch_5.pt"
os.makedirs(os.path.dirname(save_path), exist_ok=True)
torch.save(model.state_dict(), save_path)
print(f"\n📦 모델이 저장되었습니다: {save_path}")
