# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Eqp7C83nQK0yjV-q2oc7deFrC5iOh9ps
"""

####설치 후 세션 재시작 눌러야 함 'RESTART SESSION'####
!pip install numpy==1.24.4

from google.colab import drive
drive.mount('/content/drive')

#  패키지 설치
!pip install jiwer --quiet
!pip install git+https://github.com/openai/whisper.git --quiet


import os, zipfile, json, random, torch, torchaudio
from torch.utils.data import Dataset, DataLoader
from sklearn.model_selection import train_test_split
from jiwer import cer
import whisper

# 압축 해제 함수
def unzip(zip_path, extract_to):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)


json_zip_path = "/content/drive/MyDrive/인지응팀플/content/json_files/zip/[라벨]1.AI챗봇.zip"
wav_zip_path  = "/content/drive/MyDrive/인지응팀플/content/wav_files/zip/[원천]1.AI챗봇.zip"
json_dir = "/content/json_unzip"
wav_dir = "/content/wav_unzip"

unzip(json_zip_path, json_dir)
unzip(wav_zip_path,  wav_dir)

# 데이터 준비
file_list = []
for root, _, files in os.walk(json_dir):
    for filename in files:
        if not filename.endswith(".json"):
            continue
        json_path = os.path.join(root, filename)
        wav_path = json_path.replace(json_dir, wav_dir).replace(".json", ".wav")
        if not os.path.exists(wav_path):
            continue
        with open(json_path, 'r', encoding='utf-8') as f:
            label = json.load(f)["발화정보"]["stt"]
        if label.strip() != "":
            file_list.append((wav_path, label))


file_list = random.sample(file_list, min(100, len(file_list)))

# 모델 불러오기
device = "cuda" if torch.cuda.is_available() else "cpu"
model = whisper.load_model("base").to(device)
#model_path = "/content/drive/MyDrive/인지응팀플/graph_4.pt"#small, 40000개
model_path = "/content/drive/MyDrive/인지응팀플/data5000_epoch15.pt"#base, 5000개
try:
    model.load_state_dict(torch.load(model_path, map_location=device))
    print("모델 로드 완료!")
except Exception as e:
    print("모델 로드 오류:", e)

import re
from jiwer import cer


def clean_text(text, repeat_limit=3):
    # 메타 태그 제거: (NO:), (SP:), (FP:), (SN:)
    text = re.sub(r"\((NO|SP|SN|FP):[^\)]*\)", "", text)
    text = re.sub(r"\((NO|SP|SN|FP)\)", "", text)

    # 특수문자 제거: (), ., ?, ! 등
    text = re.sub(r"[().?!]", "", text)

    # 반복되는 감탄사 제거: ㅋㅋ, ㅎㅎ
    text = re.sub(r"(ㅋ|ㅎ){2,}", "", text)

    # 의미 없는 문장 반복 제거
    text = re.sub(r"(이게 뭐지|뭐지\s?){2,}", "", text)

    # 같은 단어 반복 제거: "그게 그게 그게" → "그게"
    text = re.sub(r"\b(\w+)(\s+\1)+\b", r"\1", text)

    # 의미 없는 단어 반복 tail 제거
    tokens = text.strip().split()
    for i in range(len(tokens)):
        repeat_chunk = tokens[i:i+repeat_limit]
        if len(repeat_chunk) == repeat_limit and all(t == repeat_chunk[0] for t in repeat_chunk):
            tokens = tokens[:i]
            break
    text = " ".join(tokens)

    # 공백 정리
    text = re.sub(r"\s{2,}", " ", text).strip()

    return text

def truncate_by_ref_length(hyp: str, ref: str, margin: int = 1) -> str:
    max_chars = len(ref.strip()) + margin
    return hyp[:max_chars]

# CER 평가
refs = []
hyps = []
cers = []

print("예측 결과:")
for wav_path, label in file_list:
    try:
        # 오디오 로딩 및 전처리
        audio = whisper.load_audio(wav_path)
        audio = whisper.pad_or_trim(audio)
        mel = whisper.log_mel_spectrogram(audio).to(device)


        options = whisper.DecodingOptions(
            language="ko",
            without_timestamps=True,
            temperature=0.0
        )


        result = whisper.decode(model, mel, options)

        # 정답과 예측 결과 정제
        ref_raw = label.strip()
        hyp_raw = result.text.strip()

        ref = clean_text(ref_raw)
        hyp = clean_text(hyp_raw)
        hyp = truncate_by_ref_length(hyp, ref)

        # 결과 저장
        refs.append(ref)
        hyps.append(hyp)

        # CER 계산
        cer_val = cer(ref, hyp)
        cers.append(cer_val)

        # 출력
        print(f"원본 : {ref}")
        print(f"예측 : {hyp}")
        print(f"CER: {cer_val:.4f}")
        print("-" * 50)

    except Exception as e:
        print(f"오류 (파일: {wav_path}):", e)

# 전체 평균 CER 출력
overall_cer = sum(cers) / len(cers) if cers else 0.0
print(f"\n최종 평균 CER (Character Error Rate): {overall_cer:.4f}")

